#!/bin/bash

if [[ ! ${10} ]] ; then
	echo
	echo "Pass all build options:"
	echo
	echo "<1 stage> <2 build env path> <3 target path> <4 work dir> <5 distfiles dir>..."
	echo "...<6 lux src> <7 generic build flags> <8 lux build flags> <9 CHOST> <10 MAKEOPTS>"
	echo
	echo "	Stage 1.1 - boost 1.43"
	echo "	Stage 1.4 - png"
	echo "	Stage 2   - freeimage"
	echo "	Stage 4   - Qt"
	echo "	Stage 5   - luxrays"
	echo "	Stage 6   - lux"
	exit 1
fi

############################################
DISABLE_OPENCL="-D LUXRAYS_DISABLE_OPENCL=1"
############################################

STAGE=$1
ROOT="$2"
TARGET="$3"
WORK="$4"
DIST="$5"
LUX_TAG="$6"
PAUSE=5

if [[ ! -d "$2/$6" ]] ; then
	echo
	echo "Lux src path is incorrect"
	exit 1
fi

# build flags
GENERIC_FLAGS="$7"
LUX_FLAGS="$8 -I${TARGET}/include -I${TARGET}/include/LibPNG -I${TARGET}/include/OpenEXR -L${TARGET}/lib"

# platform specs
export CHOST="$9"
export CBUILD=$CHOST
export LDFLAGS="-L${TARGET}/lib"
#hugepages:
#export LDFLAGS="-L${TARGET}/lib -L${DIST}/libhugetlb64 -Wl,--hugetlbfs-align"
CONFIGOPTS="--build=$CBUILD --host=$CHOST"
export CFLAGS="${GENERIC_FLAGS}"
export CXXFLAGS="${CFLAGS}"
export MAKEOPTS="${10}"

#####################################

mkdir -p $WORK 2>/dev/null
unset CC CXX
cd $ROOT

# check target dir existance
if [[ ! -d $TARGET ]] ; then
	$ROOT/prepare "$TARGET" "$DIST"
	STAGE=0
fi

rm -f target
ln -s $TARGET target

# STAGE 1.1
if [[ $STAGE && $STAGE < 1.2 ]] ; then
	echo " * Cleaning and unpacking boost 1.43"
	rm -rf $WORK/*
	tar -xjf ${DIST}/boost_1_43_0.tar.bz2 -C $WORK
	echo " * Compiling boost 1.43"
	cd $WORK/boost*
	if ! ./bootstrap.sh --with-toolset=gcc --without-icu --prefix=$TARGET/boost-1.43 ; then
		echo " *** Boost 1.43 bootstrap failed!"
		exit 1
	fi
	if ./bjam $MAKEOPTS -aq --toolset=gcc cflags="$GENERIC_FLAGS" cxxflags="$GENERIC_FLAGS" $CONFIGOPTS --prefix=$TARGET --layout=system --with-thread --with-program_options --with-filesystem --with-serialization --with-iostreams --with-regex --with-system --with-python threading=multi link=static release install ; then
		echo " * Boost 1.43 compiled and installed successfully"
	else
		echo " *** Boost 1.43 compilation failed!"
		exit 1
	fi
	cd $ROOT
	sleep $PAUSE
fi

# STAGE 1.4
if [[ $STAGE && $STAGE < 1.5 ]] ; then
	echo " * Cleaning and unpacking png"
	rm -rf $WORK/*
	tar --xz -xf ${DIST}/libpng*.tar.xz -C $WORK
	echo " * Compiling png"
	cd $WORK/libpng*
	if ! ./configure --disable-shared $CONFIGOPTS --prefix=$TARGET ; then
		echo " *** PNG configuration failed!"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && cp -vf .libs/libpng14.a $TARGET/lib && \
	 ln -vfs libpng14.a $TARGET/lib/libpng.a ; then
		echo " * PNG compiled and installed successfully"
	else
		echo " *** PNG compilation failed!"
		exit 1
	fi
	cd $ROOT
	sleep $PAUSE
fi

# STAGE 2
if [[ $STAGE && $STAGE < 3 ]] ; then
	echo " * Cleaning and unpacking freeimage"
	rm -rf $WORK/*
	unzip -d $WORK ${DIST}/FreeImage*.zip
	cd $WORK/FreeImage*
	echo " * Patching Background.cpp"
	patch Source/FreeImageToolkit/Background.cpp ${DIST}/FreeImage3140.Background.patch
	echo " * Patching ImathMatrix.h"
	patch Source/OpenEXR/Imath/ImathMatrix.h ${DIST}/FreeImage3140.ImathMatrix.patch
	echo " * Compiling freeimage"
	sleep $PAUSE
	if make $MAKEOPTS && cp -vf Dist/libfreeimage.a $TARGET/lib && cp -vf Dist/*.h $TARGET/include ; then
		echo " * FreeImage compiled and installed successfully"
	else
		echo " *** FreeImage compilation failed!"
		exit 1
	fi
	echo " * Installing freeimage libs headers"
	sleep $PAUSE
	mkdir $TARGET/include/{LibPNG,OpenEXR} 2>/dev/null
	if find Source/LibPNG -iname '*.h' -exec cp -vf {} $TARGET/include/LibPNG \; && \
	  cp -vRf Source/OpenEXR/{Iex,IlmImf,Imath,Half} $TARGET/include/OpenEXR && \
	  cd $TARGET/include/OpenEXR && find -iname '*.h' -exec ln -fs {} \; ; then
		echo " * FreeImage libs headers installed successfully"
	else
		echo " *** FreeImage libs headers installation failed"
		exit 1
	fi
	cd $ROOT
	sleep $PAUSE
fi

# STAGE 4
if [[ $STAGE && $STAGE < 5 ]] ; then
	echo " * Cleaning and unpacking Qt"
	rm -rf $WORK/*
	tar -xzf ${DIST}/qt-*.tar.gz -C $WORK
	echo " * Compiling Qt"
	cd $WORK/qt-*
	if echo $TARGET | grep -q '\-32' ; then
		QT_PLATFORM="-platform linux-g++-32"
	fi
	if ! echo 'yes' | ./configure -prefix $TARGET $QT_PLATFORM \
	-prefix-install -release -opensource -static -reduce-relocations -no-opengl \
	-no-3dnow -no-sse2 -no-exceptions -stl -no-qt3support -no-xmlpatterns \
	-no-multimedia -no-audio-backend -no-phonon -no-phonon-backend -no-webkit \
	-no-svg -no-javascript-jit -no-script -no-scripttools -system-zlib -no-gif \
	-system-libtiff -system-libpng -no-libmng -system-libjpeg -no-openssl -optimized-qmake \
	-no-nis -no-cups -no-iconv -no-pch -no-dbus -no-mitshm -gtkstyle -no-glib \
	-make libs -make tools -nomake examples -nomake demos -nomake docs \
	-nomake translations -I${TARGET}/include/LibPNG -L${TARGET}/lib ; then
		echo " *** Qt configuration failed!"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && sleep $PAUSE && make install ; then
		echo " * Qt compiled and installed successfully"
	else
		echo " *** Qt compilation failed!"
		exit 1
	fi
	cd $ROOT
	sleep $PAUSE
fi

# STAGE 5
if [[ $STAGE && $STAGE < 6 ]] ; then
	export HOME=${TARGET}
	export PATH=${TARGET}/bin/:$PATH
	export CFLAGS="${LUX_FLAGS} -L${TARGET}/lib"
	export CXXFLAGS="${CFLAGS}"
	export LD_LIBRARY_PATH=${TARGET}/lib/:$LD_LIBRARY_PATH
	export BOOST_ROOT=$TARGET
	export BOOST_INCLUDEDIR=$TARGET/include
	export CMAKE_INCLUDE_PATH=$TARGET/include
	export CMAKE_LIBRARY_PATH=$TARGET/lib
	export CMAKE_PREFIX_PATH=$TARGET

	FLAGS_ESC=`$ROOT/replace "$LUX_FLAGS"`
	TARGET_ESC=`$ROOT/replace "$TARGET"`

	cd $ROOT/luxrays
	if [[ ! -e CMakeLists.my ]] ; then
		echo " * Preparing CMakeLists.txt"
		cp -v CMakeLists.txt CMakeLists.my
		patch CMakeLists.my ${DIST}/CMakeLists-slg.patch
	fi

	echo " * Preparing luxrays config"
	rm -fr {CMakeCache.txt,CMakeFiles}
	rm -f lib/libluxrays.a
	cat CMakeLists.my | perl -p -e "s/__MY_COMPILER_FLAGS__/${FLAGS_ESC}/" > CMakeLists.txt
	sleep $PAUSE

	echo " * Compiling luxrays library"
	make clean
	if ! cmake $DISABLE_OPENCL . ; then
		echo " *** Luxrays library configuration failed!"
		exit 1
	fi
	sleep $PAUSE
	if ! make $MAKEOPTS luxrays ; then
		echo " *** Luxrays library compilation failed!"
		exit 1
	else
		echo " * Luxrays library compiled successfully"
	fi
	sleep $PAUSE
	cd $ROOT
fi

# STAGE 6
if [[ $STAGE && $STAGE < 7 ]] ; then
	export HOME=${TARGET}
	export PATH=${TARGET}/bin/:$PATH
	export CFLAGS="${LUX_FLAGS} -L${TARGET}/lib"
	export CXXFLAGS="${CFLAGS}"
	export LD_LIBRARY_PATH=${TARGET}/lib/:$LD_LIBRARY_PATH
	export BOOST_ROOT=$TARGET
	export BOOST_INCLUDEDIR=$TARGET/include
	export CMAKE_INCLUDE_PATH=$TARGET/include
	export CMAKE_LIBRARY_PATH=$TARGET/lib
	export CMAKE_PREFIX_PATH=$TARGET

	FLAGS_ESC=`$ROOT/replace "$LUX_FLAGS"`
	TARGET_ESC=`$ROOT/replace "$TARGET"`

	cd $ROOT/$LUX_TAG
	if [[ ! -e CMakeLists.my ]] ; then
		echo " * Preparing CMakeLists.txt"
		cp -v CMakeLists.txt CMakeLists.my
		patch CMakeLists.my ${DIST}/CMakeLists.patch
	fi

	echo " * Preparing lux config"
	rm -rf {CMakeCache.txt,CMakeFiles}
	cat CMakeLists.my | perl -p -e "s/__MY_COMPILER_FLAGS__/${FLAGS_ESC}/" > CMakeLists.txt
	sleep $PAUSE

	echo " * Compiling lux"
	cd $ROOT/$LUX_TAG
	make clean
	if ! cmake $DISABLE_OPENCL . ; then
		echo " *** Lux configuration failed!"
		exit 1
	fi
	sleep $PAUSE
	if ! make $MAKEOPTS ; then
		echo " *** Lux compilation failed!"
		exit 1
	else
		echo " * Lux compiled successfully"
	fi
	mkdir ${TARGET}/$LUX_TAG 2>/dev/null
	cp -vf $ROOT/$LUX_TAG/{luxconsole,luxrender,luxmerger,pylux.so} ${TARGET}/$LUX_TAG
	sleep $PAUSE
	cd $ROOT
	exit 0
fi
