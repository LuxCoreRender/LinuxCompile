#!/bin/bash

function begin_stage() {
	local stage_name=$1
	local distfile_mask=$2

	echo -ne "\033]0;${stage_name} stage\007"
	echo " * Cleaning and unpacking ${stage_name}"
	rm -rf $WORK/*

	if echo $distfile_mask | grep -q '\.tar\.gz$' ; then
		tar -xzf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.tgz$' ; then
		tar -xzf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.tar\.bz2$' ; then
		tar -xjf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.tar\.xz$' ; then
		tar --xz -xf ${DIST}/$distfile_mask -C $WORK
	elif echo $distfile_mask | grep -q '\.zip$' ; then
		unzip -d $WORK ${DIST}/$distfile_mask
	fi

	cd $WORK/`echo $distfile_mask | sed 's/\*.*//'`*
	echo " * Compiling ${stage_name}"
	sleep $PAUSE
}

function complete_stage() {
    local next=$1

    cd $ROOT
    echo -n $next > $TARGET/stage
    sleep $PAUSE
}

if [[ ! ${8} ]] ; then
	echo
	echo "Pass all build options or use build-* wrappers instead."
	echo
	echo "<1 build env path> <2 target path> <3 work dir> <4 distfiles dir> <5 lux src>..."
	echo "...<6 generic build flags> <7 lux build flags> <8 CHOST> [9 stage]"
	echo
	echo "	Stage 0.1 - zlib"
	echo "	Stage 0.2 - bzip2"
	echo "	Stage 0.3 - lzma"
	echo "	Stage 0.4 - glew"
	echo "	Stage 1.1 - boost"
	echo "	Stage 1.2 - jpeg"
	echo "	Stage 1.3 - tiff"
	echo "	Stage 1.4 - png"
	echo "	Stage 1.5 - freetype"
	echo "	Stage 1.6 - ilmbase"
	echo "	Stage 1.7 - openexr"
	echo "	Stage 2.1 - openimageio"
	echo "	Stage 3   - fftw"
	echo "	Stage 4   - Qt"
	echo "	Stage 4.1 - Embree"
	echo "	Stage 5   - luxrays/slg"
	echo "	Stage 6   - luxrender/luxmark"
	echo
	exit 1
fi

STAGE=$9
ROOT="$1"
TARGET="$2"
WORK="$3"
DIST="$4"
LUX_TAG="$5"
PAUSE=5

if [[ ! -d "$1/$5" ]] ; then
	echo
	echo "Lux src path is incorrect"
	exit 1
fi

if echo $LUX_TAG | grep -iq '^luxmark-' ; then
	IS_LUXMARK=1
fi

# disabling OpenCL support if sources dir doesn't contains "-opencl" postfix
# and it's not a LuxMark source tree
if echo $LUX_TAG | grep -viq '\-opencl$' && [[ ! $IS_LUXMARK ]] ; then
	echo " * OpenCL disabled"
	DISABLE_OPENCL="-D LUXRAYS_DISABLE_OPENCL=1"
else
	echo " * OpenCL enabled"
fi

# compile pyluxcore target only if sources dir contains "pyluxcore"
if echo $LUX_TAG | grep -iq 'pyluxcore' ; then
	echo " * pyluxcore target only"
	LUXRAYS_TARGET='pyluxcore'
else
	LUXRAYS_TARGET='luxrays luxcore pyluxcore luxcoreui'
fi

# build flags
GENERIC_FLAGS="$6"
LUXRAYS_FLAGS=`echo $7 | sed s/'-fvisibility=hidden'//`" -pthread -lrt"
LUXRAYS_OPTS="-D SLG_INCLUDE_DIRS='${WORK}/luxrays/samples/smallluxgpu' -D SLG_LIBRARY='${WORK}/luxrays/lib/libsmallluxgpu.a'"
LUX_FLAGS="$7 -I${TARGET}/include -L${TARGET}/lib -pthread -lrt"

# platform specs
export CHOST="$8"
export CBUILD=$CHOST
export LDFLAGS="-L${TARGET}/lib -static-libgcc -static-libstdc++"
CONFIGOPTS="--build=$CBUILD --host=$CHOST"
export CFLAGS="${GENERIC_FLAGS} -I$TARGET/include"
export CXXFLAGS="${CFLAGS} -I$TARGET/include"
export CPPFLAGS="$CPPFLAGS -I$TARGET/include"
export MAKEOPTS="-j"$(( `grep processor /proc/cpuinfo | wc -l` + 1))
export TMP="$WORK"
export TEMP="$WORK"
export TMPDIR="$WORK"

unset CC CXX
if [[ -e "${ROOT}"/use_clang ]] ; then
	echo " * Using Clang compiler"
	CLANG=1
	LUXRAYS_FLAGS="-mtune=generic -mmmx -msse -msse2 -O3 -pipe -fvisibility-inlines-hidden -fno-stack-protector -fPIC -fopenmp=libomp"
	LUX_FLAGS="-mtune=generic -mmmx -msse -msse2 -O3 -pipe -fvisibility=hidden -fvisibility-inlines-hidden -fPIC -fno-stack-protector -fopenmp=libomp -I${TARGET}/include"
	export CC="clang"
	export CXX="clang++"
	export LDFLAGS="${LDFLAGS} -O3 -Wl,-plugin,/usr/lib64/LLVMgold.so -L${TARGET}/lib -static-libgcc -static-libstdc++"
	export AR="${ROOT}/clang-ar"
	export NM="nm --plugin /usr/lib64/LLVMgold.so"
else
	echo " * Using GCC compiler"
fi

#####################################

mkdir -p $WORK 2>/dev/null
cd $ROOT

# compilation prechecks
echo -ne "\033]0;Preparing\007"
if [[ ! $STAGE ]] ; then
    S=`cat $TARGET/stage 2>/dev/null`
    if [[ ! $S ]] ; then
        STAGE=0
    else
        STAGE=$S
    fi
fi
if ! $ROOT/utils/prepare "$TARGET" "$DIST" ; then exit 1 ; fi

PYTHON_LIB=`find $TARGET -name 'libpython*'`
PYTHON_VARIANT=`if $(basename "$PYTHON_LIB" | grep -q 'm') ; then echo 'm' ; fi`
PYTHON_INCLUDE=`find /usr/include -type d -name "python3*${PYTHON_VARIANT}" | awk '{ print length($0) " " $0; }' $file | sort -r -n | cut -d ' ' -f 2- | tail -n1 | sed s/'\n'//`
echo " * Using Python library path: $PYTHON_LIB"
echo " * Using Python include path: $PYTHON_INCLUDE"
echo

# STAGE 0.1 -- zlib
NEXT=0.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage zlib zlib*.tar.gz

    if echo $TARGET | grep -q '\-64' ; then
        ZLIB_PLATFORM="--64"
    else
        ZLIB_PLATFORM=""
    fi
	if ! ./configure --static $ZLIB_PLATFORM --prefix=$TARGET ; then
		echo " !!! zlib configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * zlib compiled and installed successfully"
	else
		echo " !!! zlib compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 0.2 -- bzip2
NEXT=0.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage bzip2 bzip2*.tar.gz

	echo " * Patching bzip2 Makefile for -fPIC support"
	patch Makefile $DIST/bzip2-1.0.6-fpic.patch
	if make $MAKEOPTS && make install PREFIX=$TARGET ; then
		echo " * bzip2 compiled and installed successfully"
	else
		echo " !!! bzip2 compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 0.3 -- lzma
NEXT=0.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage lzma xz*.tar.xz

	if ! ./configure --enable-static --disable-shared --disable-scripts --disable-xz \
	--disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-lzma-links \
	$CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! lzma configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * lzma compiled and installed successfully"
	else
		echo " !!! lzma compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 0.4 -- glew
NEXT=0.5
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage glew glew*.tgz
	export GLEW_DEST=$TARGET

	if make glew.lib && make install ; then
		echo " * glew compiled and installed successfully"
	else
		echo " !!! glew compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi


# STAGE 1.1 -- Boost
NEXT=1.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage boost boost*.tar.bz2

	PYVER=`python3 --version 2>&1 | cut -d' ' -f2 | cut -d '.' -f'1 2'`
	TOOLSET=`if [[ $CLANG ]] ; then echo clang ; else echo gcc ; fi`
	echo " * Compiling boost for python-${PYVER}"
	sleep 1
	if ! ./bootstrap.sh --with-toolset=$TOOLSET --without-icu --prefix=$TARGET/boost \
	--with-python=/usr/bin/python${PYVER} \
	--with-python-root=`python${PYVER} -c "import sys; print(sys.prefix)"` ; then
		echo " !!! Boost bootstrap failed"
		exit 1
	fi
	if ./b2 $MAKEOPTS -aq --toolset=$TOOLSET cflags="$GENERIC_FLAGS" cxxflags="$GENERIC_FLAGS" \
	$CONFIGOPTS --prefix=$TARGET --layout=system --with-date_time --with-filesystem \
	--with-iostreams --with-locale --with-program_options --with-python --with-regex \
	--with-serialization --with-system --with-thread --with-chrono \
	threading=multi link=static \
	release install ; then
		echo " * Boost compiled and installed successfully"
	else
		echo " !!! Boost compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.2 -- Jpeg
NEXT=1.3
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage jpeg jpeg*.tar.gz

	cp /usr/bin/libtool /usr/share/gnuconfig/config.guess \
	/usr/share/gnuconfig/config.sub .
	if ! ./configure $CONFIGOPTS --enable-static --prefix=$TARGET ; then
		echo " !!! Jpeg configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && cp -vf .libs/libjpeg.a $TARGET/lib && \
	 cp -vf *.h $TARGET/include ; then
		echo " * Jpeg compiled and installed successfully"
	else
		echo " !!! Jpeg compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.3 -- Tiff
NEXT=1.4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage tiff tiff*.tar.gz

	if ! ./configure --enable-static --disable-shared --disable-jbig $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! TIFF configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * TIFF compiled and installed successfully"
	else
		echo " !!! TIFF compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.4 -- PNG
NEXT=1.5
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage png libpng*.tar.xz

	# --with-libpng-prefix=lux_
	if ! ./configure --enable-static --disable-shared $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! PNG configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install && cd $TARGET/include && ln -vs libpng* libpng ; then
		echo " * PNG compiled and installed successfully"
	else
		echo " !!! PNG compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.5 -- FreeType
NEXT=1.6
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage freetype freetype*.tar.bz2

	if ! ./configure --enable-static --disable-shared $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! freetype configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * freetype compiled and installed successfully"
	else
		echo " !!! freetype compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.6 -- IlmBase
NEXT=1.7
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage ilmbase ilmbase*.tar.gz

	if ! ./configure --enable-static --disable-shared $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! ilmbase configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * ilmbase compiled and installed successfully"
	else
		echo " !!! ilmbase compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 1.7 -- OpenEXR
NEXT=1.8
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage openexr openexr*.tar.gz

	if ! ./configure --enable-static --disable-shared --with-ilmbase-prefix=$TARGET \
	$CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! openexr configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * openexr compiled and installed successfully"
	else
		echo " !!! openexr compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 2.1 -- OpenImageIO
NEXT=2.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage openimageio oiio*.tar.gz

	echo " * Patching plugin.cpp"
	cp -vf $DIST/oiio-1.3.13-plugin.cpp src/libutil/plugin.cpp
	if CMAKE_PREFIX_PATH=$TARGET make $MAKEOPTS BOOST_HOME=$TARGET VERBOSE=0 \
	EMBEDPLUGINS=1 USE_OPENGL=0 USE_QT=0 USE_GIF=0 USE_OPENJPEG=0 USE_OPENSSL=0 \
	USE_PYTHON=0 BUILDSTATIC=1 LINKSTATIC=1 OIIO_BUILD_TOOLS=0 OIIO_BUILD_TESTS=0 \
	STOP_ON_WARNING=0 ; then
		echo " * openimageio compiled successfully"
	else
		echo " !!! openimageio compilation failed"
		exit 1
	fi
	echo " * Installing openimageio library and headers"
	sleep $PAUSE
	if cp -vr dist/linux*/* $TARGET && cd $TARGET/lib && \
	mv -v libOpenImageIO.a libOpenImageIOBase.a && \
	ar -rcT libOpenImageIO.a libOpenImageIOBase.a libpng.a libjpeg.a libtiff.a libHalf.a \
	libIex.a libIexMath.a libIlmImf.a libIlmThread.a libImath.a libz.a libbz2.a liblzma.a \
	libfreetype.a ; then
        echo " * openimageio installed successfully"
    else
        echo " !!! openimageio installation failed"
        exit 1
    fi

    complete_stage $NEXT
fi

# STAGE 3 -- FFTW
NEXT=4
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage fftw fftw*.tar.gz

	if ! ./configure --enable-static --disable-shared --enable-sse2 --enable-threads \
	--with-pic $CONFIGOPTS --prefix=$TARGET ; then
		echo " !!! FFTW configuration failed"
		exit 1
	fi
	sleep $PAUSE
	if make $MAKEOPTS && make install ; then
		echo " * FFTW compiled and installed successfully"
	else
		echo " !!! FFTW compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 4 -- Qt
NEXT=4.1
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage Qt qt-everywhere-opensource*.tar.gz

	if echo $TARGET | grep -q '\-32' ; then
		QT_PLATFORM="-platform linux-g++-32"
	fi
	if ! echo 'yes' | ./configure -prefix $TARGET $QT_PLATFORM \
	-prefix-install -release -opensource -static -reduce-relocations -no-opengl \
	-no-ssse3 -fast -no-3dnow -no-sse2 -no-exceptions -stl -no-qt3support \
	-no-xmlpatterns -no-multimedia -no-audio-backend -no-phonon -no-phonon-backend \
	-no-webkit -no-svg -no-javascript-jit -no-script -no-scripttools -qt-zlib -no-gif \
	-system-libtiff -system-libpng -no-libmng -system-libjpeg -no-openssl -optimized-qmake \
	-no-nis -no-cups -no-iconv -no-pch -no-dbus -no-mitshm -gtkstyle -no-glib \
	-make libs -make tools -nomake examples -nomake demos -nomake docs -nomake translations \
	-I${TARGET}/include/libpng -L${TARGET}/lib -lpng -ltiff -llzma -lbz2 ; then
		echo " !!! Qt configuration failed"
		exit 1
	fi
	sleep $PAUSE
	COMMAND=`which gmake 2>/dev/null || which make 2>/dev/null`
	if $COMMAND $MAKEOPTS && sleep $PAUSE && $COMMAND install ; then
		echo " * Qt compiled and installed successfully"
	else
		echo " !!! Qt compilation failed"
		exit 1
	fi

	complete_stage $NEXT
fi

# STAGE 4.1 -- Embree
NEXT=4.2
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	begin_stage Embree embree-bin-*.zip

	cp -v ${DIST}/embree-install.sh .

    sleep 1
    if ./embree-install.sh $TARGET ; then
        echo " * Embree library and headers installed successfully"
    else
        echo " !!! Embree library and headers installation failed"
        exit 1
    fi

	complete_stage $NEXT
fi

# STAGE 5 -- LuxRays/SLG/SLGRendererLib
NEXT=6
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	echo -ne "\033]0;LuxRays stage\007"

	export HOME=${TARGET}
	export PATH=${TARGET}/bin/:$PATH
	export CFLAGS="${LUXRAYS_FLAGS}"
	export CXXFLAGS="${CFLAGS}"
	export LD_LIBRARY_PATH=${TARGET}/lib/:$LD_LIBRARY_PATH
	export CMAKE_INCLUDE_PATH=$TARGET/include
	export CMAKE_LIBRARY_PATH="$TARGET/lib:$TARGET/lib64"
	export CMAKE_PREFIX_PATH=$TARGET
	export BOOST_ROOT=$TARGET
	export BOOST_INCLUDEDIR=$TARGET/include
	export BOOST_LIBRARY_DIRS=$TARGET/lib

	FLAGS_ESC=`$ROOT/utils/replace "$LUXRAYS_FLAGS"`
	TARGET_ESC=`$ROOT/utils/replace "$TARGET"`

	echo " * Copying luxrays sources"
	rm -rf $WORK/*
	cp -r $ROOT/$LUX_TAG/luxrays/ $WORK
	cd $WORK/luxrays
	cp -vf ${DIST}/sattva-luxrays.cmake cmake/SpecializedConfig/sattva.cmake

	echo " * Configuring $LUXRAYS_TARGET"
	if ! cmake -G "Unix Makefiles" $DISABLE_OPENCL -Wno-dev \
	-D LUXRAYS_CUSTOM_CONFIG=cmake/SpecializedConfig/sattva.cmake \
	-D PYTHON_LIBRARY:FILEPATH="$PYTHON_LIB" \
	-D PYTHON_INCLUDE_DIR:PATH="$PYTHON_INCLUDE" \
	-D PYTHON_INCLUDE_DIR2:PATH="$PYTHON_INCLUDE" \
	-D PYTHON_INCLUDE_DIRS:PATH="$PYTHON_INCLUDE" . ; then
		echo " !!! $LUXRAYS_TARGET configuration failed"
		exit 1
	fi
	sleep $PAUSE
	echo " * Compiling $LUXRAYS_TARGET"
#	if make $MAKEOPTS $LUXRAYS_TARGET ; then
    if cmake --build . --target pyluxcore -- $MAKEOPTS && cmake --build . --target luxcoreui -- $MAKEOPTS ; then
        echo " * $LUXRAYS_TARGET compiled successfully"
    else
        echo " !!! $LUXRAYS_TARGET compilation failed"
        exit 1
	fi
	sleep $PAUSE
	cd $ROOT

	if echo $LUX_TAG | grep -iq 'pyluxcore' ; then
		mkdir ${TARGET}/$LUX_TAG 2>/dev/null
		cd $WORK/luxrays
		cp -vf lib/*.so ${TARGET}/$LUX_TAG
		sleep $PAUSE
		cd $ROOT
		exit 0
	fi
fi

# STAGE 6 -- LuxRender
NEXT=7
if [[ $STAGE && $STAGE < $NEXT ]] ; then
	echo -ne "\033]0;LuxRender stage\007"

	export HOME=${TARGET}
	export PATH=${TARGET}:${TARGET}/bin/:$PATH
	export CFLAGS="${LUX_FLAGS} -I${TARGET}/include/LibPNG"
	export CXXFLAGS="${CFLAGS}"
	export LD_LIBRARY_PATH=${TARGET}/lib/:$LD_LIBRARY_PATH
	export CMAKE_INCLUDE_PATH=$TARGET/include
	export CMAKE_LIBRARY_PATH="$TARGET/lib:$TARGET/lib64"
	export CMAKE_PREFIX_PATH=$TARGET
	export BOOST_SEARCH_PATH=$TARGET
	export BOOST_ROOT=$TARGET
	export BOOST_INCLUDEDIR=$TARGET/include

	FLAGS_ESC=`$ROOT/utils/replace "$LUX_FLAGS"`
	TARGET_ESC=`$ROOT/utils/replace "$TARGET"`

	echo " * Copying lux sources"
	rm -rf $WORK/$LUX_TAG
	cp -Lr $ROOT/$LUX_TAG/ $WORK
	cd $WORK/$LUX_TAG
	if [[ ! -e CMakeLists.txt.bak ]] && [[ ! $IS_LUXMARK ]] ; then
		echo " * Preparing CMakeLists.txt"
		cp -v CMakeLists.txt CMakeLists.txt.bak
		if patch CMakeLists.txt ${DIST}/CMakeLists-lux.patch ; then
			echo
		else
			echo " !!! Patching failed"
			exit 1
		fi
	fi

	echo " * Preparing lux config"
	cat $DIST/sattva-lux.cmake | perl -p -e "s/__MY_COMPILER_FLAGS__/${FLAGS_ESC}/" > cmake/SpecializedConfig/sattva.cmake
	sleep $PAUSE

	echo " * Configuring lux"
	if ! cmake $DISABLE_OPENCL $LUXRAYS_OPTS -Wno-dev \
	-D LUX_DOCUMENTATION=0 -D LUX_USE_FREEIMAGE=0 \
	-D LUX_CUSTOM_CONFIG=cmake/SpecializedConfig/sattva.cmake \
	-D PYTHON_LIBRARY:FILEPATH="$PYTHON_LIB" \
	-D PYTHON_INCLUDE_DIR:PATH="$PYTHON_INCLUDE" \
	-D PYTHON_INCLUDE_DIR2:PATH="$PYTHON_INCLUDE" \
	-D PYTHON_INCLUDE_DIRS:PATH="$PYTHON_INCLUDE" . ; then
		echo " !!! Lux configuration failed"
		exit 1
	fi
	sleep $PAUSE
	echo " * Compiling lux"
	if ! make $MAKEOPTS ; then
		echo " !!! Lux compilation failed"
		exit 1
	else
		echo " * Lux compiled successfully"
	fi

	mkdir ${TARGET}/$LUX_TAG 2>/dev/null
	cp -vf {luxconsole,luxrender,luxmerger,luxvr,pylux.so,liblux.so} ${TARGET}/$LUX_TAG
	cd $WORK/luxrays
	cp -vf bin/slg? bin/luxcoreui lib/*.so ${TARGET}/$LUX_TAG
	sleep $PAUSE
	cd $ROOT
	exit 0
fi
